---
layout: post
title:  "Learning and mentoring on Exercism"
date:   2020-10-27 14:00:00 +0800
categories: jekyll update
---

[Exercism](https://exercism.io/) is a language-learning platform with an element of mentorship. Unlike [Codewars](https://www.codewars.com/), [HackerRank](https://www.hackerrank.com/) and [LeetCode](https://leetcode.com/) etc., users have the option of submitting code for human review. This results in a strong focus on best practices and improvements via iterations. Notwithstanding, the basis of complete submissions is still the clearing of test cases.

Currently, my primary motivation for using Exercism is to understand (on a broad, basic level) how similar tasks are accomplished across different languages, and the offerings of each of these languages. To-date, I have completed the core exercises in the Bash, C++, Julia, R, and Scala tracks, and working my way through the C, Dart, and Go tracks. I am also mentoring on the Python track.

My Exercism profile can be found [here](https://exercism.io/profiles/zyf0717).

## 1. Abstraction

Besides obvious syntax differences, it is almost immediately apparent that languages differ greatly in terms of the built-in functionalities, and this seems to be correlated with the level of abstraction from machine language. 

Languages such as Python and Scala offer a plethora of built in functions or methods to iterate through or manipulate arrays, often leading to very concise, expressive and readable code. My implementation of Hamming distance method in Scala:

```scala
object Hamming {

  def distance(s1: String, s2: String): Option[Int] =
    if (s1.length != s2.length) None
    else Some(s1.zip(s2).count(s => s._1 != s._2))
}
```

In C, the same is often accomplished using pointers and loops, and while more convoluted, is expected to compile to more performant binary code. My implementation of Hamming distance function in C:

```c
#include <string.h>
#include <stdint.h>

int compute(const char *lhs, const char *rhs)
{
    if (!lhs || !rhs || strlen(lhs) != strlen(rhs))
    {
        return -1;
    }

    int hamming = 0;
    for (size_t i = 0; i < strlen(lhs); i++)
    {
        if (lhs[i] != rhs[i])
        {
            hamming++;
        }
    }

    return hamming;
}
```

It is worth noting that the built-in modules of higher-level languages (like Python and R) are often written in highly performant lower-level languages like C or Fortran. Such languages also often have libraries written in or interfacing with lower-level languages and their libraries. For example, NumPy is written in both Python and C.

## 2. Language focus

Based on mentor feedback, it is also apparent that the focus or usage of each language is different. Notwithstanding, readability is a recurring theme.

There is a great emphasis on performance when writing code in C++ or C, and this is not surprising since these languages are used for systems or embedded programming, or performance-critical applications. Feedback received from mentors generally lead towards writing performant but readable code conforming to certain code style standards. Similarly for Julia, mentors often comment on performance or optimization.

Given that Scala is both object-oriented and functional, the emphasis is shifted towards writing functional expressions within an object-oriented paradigm. To-date, I find writing Scala code to be the most enjoyable.

For Python, I generally focus on getting students to write Pythonic code, and to follow the [Python style guide](https://www.python.org/dev/peps/pep-0008/). List comprehensions and using built-in methods or functions are recurring themes. After all, Python code is meant to be clear, concise and maintainable because of its simplicity. My implementation of Hamming distance function in Python:

```python
def distance(strand_a, strand_b):
    if len(strand_a) != len(strand_b):
        raise ValueError('Length of strands not equal')

    return sum(a != b for a, b in zip(strand_a, strand_b))
```

Other languages like Bash and R have different domains, and focus is more on scripting (correctly) and vectorization respectively. My implementation of Hamming distance in Bash and R respectively:

```bash
#!/usr/bin/env bash

main () {
  # Error handling
  if (( $# != 2 ))
  then
    echo "Usage: hamming.sh <string1> <string2>"
    return 1
  elif (( ${#1} != ${#2} ))
  then
    echo "left and right strands must be of equal length"
    return 1
  fi
  
  # Calculating
  local hamming=0
  for (( i=0; i<${#1}; i++ )); do
    [[ "${1:i:1}" != "${2:i:1}" ]] && ((hamming++))
  done
  echo $hamming
  return 0
}

main "$@"
```

```R
hamming <- function(strand1, strand2) {
  if (nchar(strand1) != nchar(strand2)) {
    stop("Strings are of different length!")
  }
  sum(strsplit(strand1, split = "")[[1]] != strsplit(strand2, split = "")[[1]])
}
```

## 3. Mentoring

Mentoring is another great aspect of Exercism, where one takes the role of a reviewer rather than the student. To put it succinctly, code review fleshes out gaps in reviewers' understanding, especially when responding to complicated queries. Contributing back to the Exercism platform via mentoring also a great way to share working knowledge, and rounds out the Exercism experience.

Students are offered the option of leaving testimonials for their mentors, and it is heartening to receive testimonials like these:

![Exercism testimonials](https://zyf0717.github.io/assets/images/exercism-testimonials.png)

## 4. Other contributions

It is also possible to contribute to Exercism as a track maintainer, or create pull requests from the [Exercism repository](https://github.com/exercism/). I do not have experience in either -- perhaps I will undertake either/both of these in the future.